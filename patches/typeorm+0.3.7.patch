diff --git a/node_modules/typeorm/browser/driver/react-native/ReactNativeConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/react-native/ReactNativeConnectionOptions.d.ts
index bc9d913..e87d5c3 100644
--- a/node_modules/typeorm/browser/driver/react-native/ReactNativeConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/react-native/ReactNativeConnectionOptions.d.ts
@@ -13,7 +13,7 @@ export interface ReactNativeConnectionOptions extends BaseDataSourceOptions {
     readonly database: string;
     /**
      * The driver object
-     * This defaults to require("react-native-sqlite-storage")
+     * This defaults to require("react-native-quick-sqlite")
      */
     readonly driver?: any;
     /**
diff --git a/node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js b/node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js
index e016203..e2d4456 100644
--- a/node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js
+++ b/node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js
@@ -53,7 +53,7 @@ export class ReactNativeDriver extends AbstractSqliteDriver {
                 const databaseConnection = db;
                 // we need to enable foreign keys in sqlite to make sure all foreign key related features
                 // working properly. this also makes onDelete work with sqlite.
-                databaseConnection.executeSql(`PRAGMA foreign_keys = ON`, [], (result) => {
+                databaseConnection.asyncExecuteSql(`PRAGMA foreign_keys = ON`, [], (result) => {
                     ok(databaseConnection);
                 }, (error) => {
                     fail(error);
@@ -68,11 +68,11 @@ export class ReactNativeDriver extends AbstractSqliteDriver {
      */
     loadDependencies() {
         try {
-            const sqlite = this.options.driver || require("react-native-sqlite-storage");
+            const sqlite = this.options.driver || require("react-native-quick-sqlite");
             this.sqlite = sqlite;
         }
         catch (e) {
-            throw new DriverPackageNotInstalledError("React-Native", "react-native-sqlite-storage");
+            throw new DriverPackageNotInstalledError("React-Native", "react-native-quick-sqlite");
         }
     }
 }
diff --git a/node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js b/node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js
index 0d409ec..8629722 100644
--- a/node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js
+++ b/node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js
@@ -38,7 +38,7 @@ export class ReactNativeQueryRunner extends AbstractSqliteQueryRunner {
             const databaseConnection = await this.connect();
             this.driver.connection.logger.logQuery(query, parameters, this);
             const queryStartTime = +new Date();
-            databaseConnection.executeSql(query, parameters, (raw) => {
+            databaseConnection.asyncExecuteSql(query, parameters, (raw) => {
                 // log slow queries if maxQueryExecution time is set
                 const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;
                 const queryEndTime = +new Date();
diff --git a/node_modules/typeorm/browser/platform/PlatformTools.js b/node_modules/typeorm/browser/platform/PlatformTools.js
index f0e731b..a2fbb9f 100644
--- a/node_modules/typeorm/browser/platform/PlatformTools.js
+++ b/node_modules/typeorm/browser/platform/PlatformTools.js
@@ -97,8 +97,8 @@ export class PlatformTools {
                 /**
                  * react-native-sqlite
                  */
-                case "react-native-sqlite-storage":
-                    return require("react-native-sqlite-storage");
+                case "react-native-quick-sqlite":
+                    return require("react-native-quick-sqlite");
             }
         }
         catch (err) {
diff --git a/node_modules/typeorm/driver/react-native/ReactNativeConnectionOptions.d.ts b/node_modules/typeorm/driver/react-native/ReactNativeConnectionOptions.d.ts
index bc9d913..e87d5c3 100644
--- a/node_modules/typeorm/driver/react-native/ReactNativeConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/react-native/ReactNativeConnectionOptions.d.ts
@@ -13,7 +13,7 @@ export interface ReactNativeConnectionOptions extends BaseDataSourceOptions {
     readonly database: string;
     /**
      * The driver object
-     * This defaults to require("react-native-sqlite-storage")
+     * This defaults to require("react-native-quick-sqlite")
      */
     readonly driver?: any;
     /**
diff --git a/node_modules/typeorm/driver/react-native/ReactNativeDriver.js b/node_modules/typeorm/driver/react-native/ReactNativeDriver.js
index 4fa418d..de1361c 100644
--- a/node_modules/typeorm/driver/react-native/ReactNativeDriver.js
+++ b/node_modules/typeorm/driver/react-native/ReactNativeDriver.js
@@ -71,11 +71,11 @@ class ReactNativeDriver extends AbstractSqliteDriver_1.AbstractSqliteDriver {
      */
     loadDependencies() {
         try {
-            const sqlite = this.options.driver || require("react-native-sqlite-storage");
+            const sqlite = this.options.driver || require("react-native-quick-sqlite");
             this.sqlite = sqlite;
         }
         catch (e) {
-            throw new DriverPackageNotInstalledError_1.DriverPackageNotInstalledError("React-Native", "react-native-sqlite-storage");
+            throw new DriverPackageNotInstalledError_1.DriverPackageNotInstalledError("React-Native", "react-native-quick-sqlite");
         }
     }
 }
diff --git a/node_modules/typeorm/platform/PlatformTools.js b/node_modules/typeorm/platform/PlatformTools.js
index 416fa9f..8272f91 100644
--- a/node_modules/typeorm/platform/PlatformTools.js
+++ b/node_modules/typeorm/platform/PlatformTools.js
@@ -105,8 +105,8 @@ class PlatformTools {
                 /**
                  * react-native-sqlite
                  */
-                case "react-native-sqlite-storage":
-                    return require("react-native-sqlite-storage");
+                case "react-native-quick-sqlite":
+                    return require("react-native-quick-sqlite");
             }
         }
         catch (err) {
